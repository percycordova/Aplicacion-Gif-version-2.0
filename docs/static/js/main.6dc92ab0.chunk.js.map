{"version":3,"sources":["components/Form.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","Hooks/UseFetchGifs.js","components/RowTableCategory.js","components/TableCategory.js","GifExpertApp.js","App.js","index.js"],"names":["Form","insertData","updateData","dataToEdit","setDataToEdit","initialForm","id","category","quantity","useState","form","setForm","useEffect","handleChange","e","target","name","value","handleReset","validationQuantity","length","test","className","onSubmit","preventDefault","alert","type","onChange","required","onClick","getGif","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","console","log","src","alt","GifGrid","loading","state","setstate","then","imgs","UseFetchGifs","RowTableCategory","el","deleteData","TableCategory","colSpan","GifExpertApp","db","setDb","data-text","newData","window","confirm","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dc92ab0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\n\r\nexport const Form = ({ insertData, updateData, dataToEdit, setDataToEdit }) => {\r\n\r\n    const initialForm = {\r\n        id: null,\r\n        category: \"\",\r\n        quantity: \"\",\r\n\r\n    }\r\n    const [form, setForm] = useState(initialForm);\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataToEdit) {\r\n            setForm(dataToEdit);\r\n        } else {\r\n            setForm(initialForm);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dataToEdit]); //cuando haya algun cambio en esta variable se va ejecutar\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (form.id === null) {\r\n            if (form.category.length >= 3) {\r\n                if (/^([0-9])*$/.test(form.quantity)) {\r\n                    if (form.quantity > 0 && form.quantity < 21) {\r\n                        insertData(form);\r\n                        handleReset();\r\n                    } else {\r\n                        alert(\"Complete bien los campos\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            else {\r\n                alert(\"Complete bien los campos\");\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n            if (form.category.length >= 3) {\r\n                if (/^([0-9])*$/.test(form.quantity)) {\r\n                    if (form.quantity > 0 && form.quantity < 21) {\r\n                        updateData(form);\r\n                        handleReset();\r\n                    } else {\r\n                        alert(\"Complete bien los campos\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            else {\r\n                alert(\"Complete bien los campos\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handleReset = (e) => {\r\n        setForm(initialForm);\r\n        setDataToEdit(null);\r\n    }\r\n\r\n\r\n\r\n    const validationQuantity = () => {\r\n        let resp = \"\"\r\n        if (form.category.length >= 3) {\r\n            if (form.quantity === \"\") {\r\n                resp = \"Ingrese un valor numérico\"\r\n            } else {\r\n\r\n                if (/^([0-9])*$/.test(form.quantity)) {\r\n                    if (form.quantity > 0 && form.quantity < 21) {\r\n                        resp = \"Datos correctos\";\r\n\r\n                    }\r\n                    else {\r\n                        resp = \"El numero debe ser < 21\";\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    resp = \"Ingrese un valor numérico\";\r\n                }\r\n\r\n            }\r\n        } else {\r\n            resp = \"Ingrese una Categoría\";\r\n        }\r\n        return resp;\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"grid-form\">\r\n            <div className=\"wrapper\">\r\n                <h2>\r\n                    {(dataToEdit === null) ? \"Agregar Categoria\" : \"Actualizar Datos\"}\r\n                </h2>\r\n\r\n\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                    <div className=\"input-data\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"category\"\r\n                            onChange={handleChange}\r\n                            value={form.category}\r\n                            required\r\n                        />\r\n                        <div className=\"underline\">\r\n                        </div>\r\n                        <label>Categoría a buscar</label>\r\n                    </div>\r\n\r\n                    <div className=\"input-data\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"quantity\"\r\n                            onChange={handleChange}\r\n                            value={form.quantity}\r\n                            required\r\n                        />\r\n                        <div className=\"underline\">\r\n                        </div>\r\n                        <label>Cantidad de imagenes</label>\r\n                    </div>\r\n\r\n                    <div>\r\n\r\n                        <p className={\r\n                            (validationQuantity() === \"Datos correctos\")\r\n                                ? \"success\"\r\n                                : \"danger\"\r\n                        }\r\n\r\n                        ><span className={\r\n                            (validationQuantity() === \"Datos correctos\")\r\n                                ? \"success-c\"\r\n                                : \"danger-x\"\r\n                        } > {(validationQuantity() === \"Datos correctos\") ? \"✓\" : \"X\"}  </span> {validationQuantity()}</p>\r\n\r\n                    </div>\r\n                    <div className=\"content-button\">\r\n                    <input type=\"submit\" value={(dataToEdit === null) ? \"Enviar\" : \"Actualizar\"} />\r\n                    <input type=\"reset\" value=\"Limpiar\" onClick={handleReset} />\r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","export const getGif = async (category,quantity) => {\r\n    const url = `https://api.giphy.com/v1/stickers/search?q=${encodeURI(category)}&limit=${quantity}&api_key=Qk6fN3mpsj2lZFugrdDXpJJQCs7tMC1q`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();//tiene dos atributos data y meta\r\n    // eslint-disable-next-line array-callback-return\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log(id);\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { UseFetchGifs } from '../Hooks/UseFetchGifs'\r\n//import { getGif } from '../helpers/getGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category,quantity }) => {\r\n\r\n\r\n    const { data:images,loading } = UseFetchGifs(category,quantity);\r\n    return (\r\n        < div className=\"contenedor-card\" >\r\n            \r\n            <h3 >{category}</h3>\r\n            {loading&&<p>Loading</p>}\r\n\r\n            {  <ul className=\"card-grid\">\r\n                {\r\n\r\n                    images.map(img =>\r\n                    (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} //paso el objeto como parametro\r\n                        />\r\n                    )\r\n                    )\r\n\r\n                }\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { useEffect, useState } from 'react'\r\nimport { getGif } from '../helpers/getGif'\r\nexport const UseFetchGifs = (category,quantity) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGif(category,quantity)\r\n        .then(imgs=>{\r\n              setstate({\r\n                data: imgs,\r\n                loading: false,\r\n              });\r\n             \r\n        });\r\n\r\n\r\n    }, [category,quantity])\r\n\r\n    return state; //{data:[], loading:true}\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const RowTableCategory = ({ el, deleteData, setDataToEdit }) => {\r\n    const { id, category, quantity } = el;\r\n    return (\r\n        <tr><td>{id}</td>\r\n            <td>{category}</td>\r\n            <td>{quantity}</td>\r\n            <td>\r\n                <input type=\"button\" onClick={() => setDataToEdit(el)} value=\"Editar\" className=\"button\"/>\r\n                <input type=\"button\" onClick={() => deleteData(id)} value=\"Eliminar\" className=\"button\" />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { RowTableCategory } from './RowTableCategory'\r\n\r\nexport default function TableCategory({ data, deleteData, setDataToEdit }) {\r\n    return (\r\n        <div className=\"grid-table\">\r\n            <h2 className=\"title-table\">Tabla de Categorías</h2>\r\n            <table className=\"table-categoty\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Categoría</th>\r\n                        <th># Imágenes</th>\r\n                        <th>Acciones</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        (data.length === 0)\r\n                            ? <tr><td colSpan=\"4\">No hay Datos para cargar ...</td></tr>\r\n                            : data.map(el =>\r\n                                < RowTableCategory\r\n                                    el={el}\r\n                                    key={el.id}\r\n                                    deleteData={deleteData}\r\n                                    setDataToEdit={setDataToEdit}\r\n                                />)\r\n                    }\r\n                </tbody>\r\n\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form } from './components/Form';\r\nimport { GifGrid } from './components/GifGrid';\r\nimport TableCategory from './components/TableCategory';\r\n\r\nexport const GifExpertApp = () => {\r\n    //Base de datos inicial\r\n    const initialDB = [\r\n        {\r\n            id: 1,\r\n            category: 'Dragon ball',\r\n            quantity: 8\r\n        },\r\n        {\r\n            id: 2,\r\n            category: 'Naruto',\r\n            quantity: 4\r\n        }\r\n    ];\r\n\r\n    const [db, setDb] = useState(initialDB);//para controlar mi DB\r\n    const [dataToEdit, setDataToEdit] = useState(null); //para controlar los datos a editar\r\n\r\n\r\n    const insertData = (data) => {\r\n        data.id = (db.length + 1);\r\n        setDb([...db, data]); //Agregamos un nuevo valor a mi arreglo inicial\r\n        alert(\"Categoría Ingresada\");\r\n    }\r\n\r\n    const updateData = (data) => {\r\n        let newData = db.map(el => (el.id === data.id) ? data : el);\r\n        setDb(newData);\r\n        alert(\"Se actulizo la BD\");\r\n    }\r\n\r\n    const deleteData = (id) => {\r\n        let isDelete = window.confirm(`¿Estás seguro de eliminar el registro con id? ${id}`);\r\n        if (isDelete) {\r\n            let newData = db.filter(el => el.id !== id); //agrego a mi nuevo arreglo todos los valores distintos del que voy a eliminar\r\n            setDb(newData);\r\n        }\r\n        else {\r\n            return\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"content-primary\">\r\n            <div className=\"title\">\r\n                <div className=\"content\">\r\n                    <h1 className=\"text\" data-text=\"Gif Expert App\"> Gif Expert App</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <Form\r\n                insertData={insertData}\r\n                updateData={updateData}\r\n                dataToEdit={dataToEdit}\r\n                setDataToEdit={setDataToEdit}\r\n\r\n\r\n            />\r\n            <TableCategory\r\n                data={db}\r\n                deleteData={deleteData}\r\n                setDataToEdit={setDataToEdit}\r\n            />\r\n            {\r\n                <ol >\r\n                    {\r\n                        //categories.map(category => <li key={category}>{category} </li>) //Cunado retorno solo una linea no es necesario el return ni las llaves\r\n                        db.map(category => (\r\n                            <GifGrid\r\n                                key={category.category}\r\n                                category={category.category} \r\n                                quantity={category.quantity}\r\n                                />\r\n                        ))\r\n                    }\r\n                </ol>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { GifExpertApp } from './GifExpertApp'\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <>   \r\n            <GifExpertApp />\r\n        </>\r\n    )\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}